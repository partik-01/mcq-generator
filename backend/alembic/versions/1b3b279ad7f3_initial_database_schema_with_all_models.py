"""Initial database schema with all models

Revision ID: 1b3b279ad7f3
Revises: 
Create Date: 2025-09-26 17:27:38.896376

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1b3b279ad7f3'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('TRUE'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('mime_type', sa.String(length=50), nullable=True),
    sa.Column('document_hash', sa.String(length=64), nullable=True),
    sa.Column('processing_status', sa.String(length=20), server_default=sa.text("'pending'"), nullable=True),
    sa.Column('upload_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('extraction_completed_at', sa.DateTime(), nullable=True),
    sa.Column('document_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_documents_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_documents')),
    sa.UniqueConstraint('document_hash', name=op.f('uq_documents_document_hash'))
    )
    op.create_index(op.f('ix_documents_id'), 'documents', ['id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_name', sa.String(length=200), nullable=True),
    sa.Column('topic_ids', sa.JSON(), nullable=True),
    sa.Column('target_difficulty', sa.Integer(), nullable=False),
    sa.Column('questions_per_session', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), server_default=sa.text("'active'"), nullable=True),
    sa.Column('started_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_activity', sa.DateTime(), nullable=True),
    sa.Column('total_questions', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('correct_answers', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('current_streak', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_sessions_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_sessions'))
    )
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_table('topics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('extracted_content', sa.Text(), nullable=True),
    sa.Column('topic_order', sa.Integer(), nullable=True),
    sa.Column('ai_confidence_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name=op.f('fk_topics_document_id_documents'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_topics'))
    )
    op.create_index(op.f('ix_topics_id'), 'topics', ['id'], unique=False)
    op.create_table('subtopics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('topic_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('extracted_content', sa.Text(), nullable=True),
    sa.Column('subtopic_order', sa.Integer(), nullable=True),
    sa.Column('ai_confidence_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name=op.f('fk_subtopics_topic_id_topics'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_subtopics'))
    )
    op.create_index(op.f('ix_subtopics_id'), 'subtopics', ['id'], unique=False)
    op.create_table('flashcards',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('topic_id', sa.Integer(), nullable=True),
    sa.Column('subtopic_id', sa.Integer(), nullable=True),
    sa.Column('front_content', sa.Text(), nullable=False),
    sa.Column('back_content', sa.Text(), nullable=False),
    sa.Column('difficulty_level', sa.Integer(), nullable=False),
    sa.Column('card_hash', sa.String(length=64), nullable=True),
    sa.Column('ai_generated_metadata', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('TRUE'), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.CheckConstraint('difficulty_level BETWEEN 1 AND 5', name=op.f('ck_flashcards_flashcard_valid_difficulty')),
    sa.ForeignKeyConstraint(['subtopic_id'], ['subtopics.id'], name=op.f('fk_flashcards_subtopic_id_subtopics')),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name=op.f('fk_flashcards_topic_id_topics')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_flashcards')),
    sa.UniqueConstraint('card_hash', name=op.f('uq_flashcards_card_hash'))
    )
    op.create_index(op.f('ix_flashcards_id'), 'flashcards', ['id'], unique=False)
    op.create_table('mcqs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('topic_id', sa.Integer(), nullable=True),
    sa.Column('subtopic_id', sa.Integer(), nullable=True),
    sa.Column('question', sa.Text(), nullable=False),
    sa.Column('option_a', sa.String(length=500), nullable=False),
    sa.Column('option_b', sa.String(length=500), nullable=False),
    sa.Column('option_c', sa.String(length=500), nullable=False),
    sa.Column('option_d', sa.String(length=500), nullable=False),
    sa.Column('correct_answer', sa.CHAR(length=1), nullable=False),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.Column('difficulty_level', sa.Integer(), nullable=False),
    sa.Column('question_hash', sa.String(length=64), nullable=True),
    sa.Column('ai_generated_metadata', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('TRUE'), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.CheckConstraint("correct_answer IN ('A', 'B', 'C', 'D')", name=op.f('ck_mcqs_valid_correct_answer')),
    sa.CheckConstraint('difficulty_level BETWEEN 1 AND 5', name=op.f('ck_mcqs_valid_difficulty_level')),
    sa.ForeignKeyConstraint(['subtopic_id'], ['subtopics.id'], name=op.f('fk_mcqs_subtopic_id_subtopics')),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name=op.f('fk_mcqs_topic_id_topics')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mcqs')),
    sa.UniqueConstraint('question_hash', name=op.f('uq_mcqs_question_hash'))
    )
    op.create_index(op.f('ix_mcqs_id'), 'mcqs', ['id'], unique=False)
    op.create_table('flashcard_reviews',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('flashcard_id', sa.Integer(), nullable=False),
    sa.Column('ease_factor', sa.Integer(), nullable=False),
    sa.Column('review_interval', sa.Integer(), nullable=False),
    sa.Column('next_review_date', sa.DateTime(), nullable=False),
    sa.Column('reviewed_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.CheckConstraint('ease_factor BETWEEN 1 AND 5', name=op.f('ck_flashcard_reviews_valid_ease_factor')),
    sa.ForeignKeyConstraint(['flashcard_id'], ['flashcards.id'], name=op.f('fk_flashcard_reviews_flashcard_id_flashcards'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_flashcard_reviews_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_flashcard_reviews'))
    )
    op.create_index(op.f('ix_flashcard_reviews_id'), 'flashcard_reviews', ['id'], unique=False)
    op.create_table('user_responses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('mcq_id', sa.Integer(), nullable=False),
    sa.Column('selected_answer', sa.CHAR(length=1), nullable=False),
    sa.Column('is_correct', sa.Boolean(), nullable=False),
    sa.Column('time_taken', sa.Integer(), nullable=True),
    sa.Column('question_difficulty_at_time', sa.Integer(), nullable=True),
    sa.Column('response_metadata', sa.JSON(), nullable=True),
    sa.Column('answered_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.CheckConstraint("selected_answer IN ('A', 'B', 'C', 'D')", name=op.f('ck_user_responses_valid_selected_answer')),
    sa.ForeignKeyConstraint(['mcq_id'], ['mcqs.id'], name=op.f('fk_user_responses_mcq_id_mcqs')),
    sa.ForeignKeyConstraint(['session_id'], ['user_sessions.id'], name=op.f('fk_user_responses_session_id_user_sessions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_responses_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_responses'))
    )
    op.create_index(op.f('ix_user_responses_id'), 'user_responses', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_responses_id'), table_name='user_responses')
    op.drop_table('user_responses')
    op.drop_index(op.f('ix_flashcard_reviews_id'), table_name='flashcard_reviews')
    op.drop_table('flashcard_reviews')
    op.drop_index(op.f('ix_mcqs_id'), table_name='mcqs')
    op.drop_table('mcqs')
    op.drop_index(op.f('ix_flashcards_id'), table_name='flashcards')
    op.drop_table('flashcards')
    op.drop_index(op.f('ix_subtopics_id'), table_name='subtopics')
    op.drop_table('subtopics')
    op.drop_index(op.f('ix_topics_id'), table_name='topics')
    op.drop_table('topics')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_documents_id'), table_name='documents')
    op.drop_table('documents')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
